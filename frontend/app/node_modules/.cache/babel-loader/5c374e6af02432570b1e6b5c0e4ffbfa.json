{"ast":null,"code":"var _jsxFileName = \"/Users/rakeshpatels/Desktop/data/fullstack/frontend/app/src/index.js\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from 'axios';\nimport \"./index.css\";\n\nfunction Square({\n  value,\n  onClick\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, value);\n}\n\nfunction Restart({\n  onClick\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"restart\",\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, \"Play again\");\n}\n\nfunction Game() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [isXNext, setIsXNext] = useState(false);\n  const winner = calculateWinner(squares);\n\n  function renderRestartButton() {\n    return /*#__PURE__*/React.createElement(Restart, {\n      onClick: () => {\n        setSquares(Array(9).fill(null));\n        setIsXNext(false);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    });\n  }\n\n  function getStatus() {\n    if (winner) {\n      return \"Winner: \" + winner;\n    } else if (isBoardFull(squares)) {\n      return \"Draw!\";\n    } else {\n      return \"Next player: \" + (isXNext ? \"X\" : \"O\");\n    }\n  }\n\n  function renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: squares[i],\n      onClick: () => {\n        if (squares[i] != null || winner != null) {\n          return;\n        }\n\n        const nextSquares = squares.slice();\n        nextSquares[i] = isXNext ? \"X\" : \"O\";\n        setSquares(nextSquares);\n        var isBoardFull = true;\n\n        for (var j = 0; j < nextSquares.length; j++) {\n          if (nextSquares[j] == null) isBoardFull = false;\n        }\n\n        if (isBoardFull) return;\n\n        if (winner == null) {\n          axios.post(`http://localhost:8080/state`, {\n            \"data\": nextSquares\n          }).then(res => {\n            const nextSquares = squares.slice();\n\n            for (var i = 0; i < nextSquares.length; i++) {\n              if (res.data[i] != null) {\n                nextSquares[i] = res.data[i];\n              }\n            }\n\n            setSquares(nextSquares);\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, renderSquare(0), renderSquare(1), renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, renderSquare(3), renderSquare(4), renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, renderSquare(6), renderSquare(7), renderSquare(8))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, getStatus()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"restart-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, renderRestartButton())));\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const possibleLines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // go over all possibly winning lines and check if they consist of only X's/only O's\n\n  for (let i = 0; i < possibleLines.length; i++) {\n    const [a, b, c] = possibleLines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nfunction isBoardFull(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/rakeshpatels/Desktop/data/fullstack/frontend/app/src/index.js"],"names":["React","useState","ReactDOM","axios","Square","value","onClick","Restart","Game","squares","setSquares","Array","fill","isXNext","setIsXNext","winner","calculateWinner","renderRestartButton","getStatus","isBoardFull","renderSquare","i","nextSquares","slice","j","length","post","then","res","data","render","document","getElementById","possibleLines","a","b","c"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from 'axios';\nimport \"./index.css\";\n\nfunction Square({ value, onClick }) {\n\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\n\nfunction Restart({ onClick }) {\n\n  return (\n    <button className=\"restart\" onClick={onClick}>\n      Play again\n    </button>\n  );\n}\n\nfunction Game() {\n  const [ squares, setSquares ] = useState(Array(9).fill(null));\n  const [ isXNext, setIsXNext ] = useState(false);\n  const winner = calculateWinner(squares);\n\n\n  function renderRestartButton() {\n    return (\n      <Restart\n        onClick={() => {\n          setSquares(Array(9).fill(null));\n          setIsXNext(false);\n        }}\n      />\n    );\n  }\n\n  function getStatus() {\n    if (winner) {\n      return \"Winner: \" + winner;\n    } else if (isBoardFull(squares)) {\n      return \"Draw!\";\n    } else {\n      return \"Next player: \" + (isXNext ? \"X\" : \"O\");\n    }\n  }\n\n\n  function renderSquare(i) {\n    return <Square\n      value={squares[i]}\n      onClick={() => {\n        if (squares[i] != null || winner != null) {\n          return;\n        }\n        const nextSquares = squares.slice();\n        nextSquares[i] = isXNext ? \"X\" : \"O\";\n        setSquares(nextSquares);\n        var isBoardFull = true;\n        for (var j = 0; j < nextSquares.length; j++) {\n          if(nextSquares[j] == null) isBoardFull = false\n        }\n        if(isBoardFull) return;\n        if (winner == null) {\n          axios.post(`http://localhost:8080/state`, { \"data\" : nextSquares })\n            .then(res => {\n              const nextSquares = squares.slice();\n              for (var i = 0; i < nextSquares.length; i++) {\n                if (res.data[i] != null) {\n                  nextSquares[i] = res.data[i];\n                }\n              }\n              setSquares(nextSquares);\n            })\n        }\n      }}\n      />;\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <div className=\"board-row\">\n            {renderSquare(0)}\n            {renderSquare(1)}\n            {renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {renderSquare(3)}\n            {renderSquare(4)}\n            {renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {renderSquare(6)}\n            {renderSquare(7)}\n            {renderSquare(8)}\n          </div>\n        </div>\n        <div className=\"game-info\">{getStatus()}</div>\n        <div className=\"restart-button\">{renderRestartButton()}</div>\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const possibleLines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  // go over all possibly winning lines and check if they consist of only X's/only O's\n  for (let i = 0; i < possibleLines.length; i++) {\n    const [a, b, c] = possibleLines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction isBoardFull(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}